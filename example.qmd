---
title: "ETC5513 Assignment 2: Collaborative and Reproducible Practices"
author: "Rachna Radhakrishna"
format: 
  html:
    code-fold: true
    toc: true
    toc-depth: 2
    fig-cap-location: bottom
    number-sections: true
editor: visual
---

# Introduction

This report demonstrates the utilization of Git and Quarto for collaborative and reproducible workflows in R. The following demonstrates a step-by-step walk through for completing the tasks required for Assignment 2 in the ETC5513 course. It covers setting up a Git repository, managing branches, resolving conflicts, and more, using the command line interface.

## 1. Create a New RStudio Project

-   Open RStudio and create a new RStudio project Select File → New Project → New Directory → New Project
-   Name the project (e.x - "ETC5513_Assignment_2") and choose a location.
-   Next create a ‘.qmd’ file by selecting File → New File → Quarto Document
-   Add some simple markdown content to ‘example.qmd’
-   Knit the file to HTML by Rendering it

A successful render should provide a HTML output with the same contents of your Quarto document

## 2. Initialize a Git repository and push to GitHub

-   Initialize the project folder ETC5513_Assignment_2 as a Git repository using `git init`

-   Create a new GitHub repository with the same name and connect the local repository to the remote GitHub repository using

    `git remote add origin https://github.com/rrad0002/ETC5513_Assignment_2.git`

-   Add and commit your initial files using the commands:

    `git add .`

    `git commit -m "Initial commit with example.qmd"`

-   Push the initial commit to the `main` branch

    `git branch -M main`

    `git push -u origin main`

## 3. Create and use a new branch

-   Create a new branch called `testbranch` using the command `git checkout -b testbranch`

-   Modify `example.qmd`

    "This entire section is a modification to demonstrate a branch level edit for Assignment 2"

-   Add, commit, and push the changes

    `git add example.qmd`

    `git commit -m "made changes to example.qmd in testbranch"`

    `git push -u origin testbranch`

## 4. Let's amend the commit into a folder

-   Create a folder manually in File Explorer named `data` or using `mkdir data`
-   A publicly available dataset(.csv) on depressive disorders from the IHME Global Burden of Disease study was used to perform basic exploratory data analysis. Move this file into the `data` folder
-   Stage using `git add data/` then amend the previous commit using `git commit --amend -m "added dataset to data folder"`
-   Force push the updated commit to GitHub `git push --force` as we changed history using `--amend`

## 5. Let's create a merge conflict and resolve it

-   First switch back to the main branch using `git checkout main`

-   Modify `example.qmd` in a way that conflicts with `testbranch`

-   Commit then push

    `git add example.qmd`

    `git commit -m "main branch edit to create conflict"`

    `git push`

## 6. Merge changes between `testbranch` and `main`

-   Run command `git merge testbranch` then resolve the conflict manually in `example.qmd`

-   Remove the conflict markers (`<<<<<<<`, `=======`, `>>>>>>>`) that depict the merger of the contents of the `main` and `testbranch` and finally write a clean, combined version

-   Make sure to stage and commit the changes post the merger

    `git add example.qmd`

    `git commit -m "successfully resolved merge conflict"`

    `git push`
